README

The backend server script is called ribbit_server.go and the front end server is called client.go

To run the backend server, you must first install gouuid:
go get github.com/nu7hatch/gouuid

Make sure the Users directory which is included in the submission is in the same directory as the two server scripts

To start the server:
go run ribbit_server.go
go run client.go

Create an account
http://www.localhost.com:8080/create

Login
http://www.localhost.com:8080/login

Logout
http://www.localhost.com:8080/logout

Add or remove friends
http://www.localhost.com:8080/manage

Delete your account
http://www.localhost.com:8080/delete

To post messages and see your feed
http://www.localhost.com:8080/main


Data storage: All user data is stored in files within a directory Users
A directory is maintained for each user, which contains user data .txt files for name, password, and email, as well as a friends directory, which contains a .txt file for each friend the user has, and posts directory for each post the user writes.

Messaging between frontend and backend:

post_croak func
front end sends message string over tcp as: "post", post, username (where post is the post content) to localhost:8081.  If the post is greater than 100 characters, the server will send code 512, and otherwise will send code 200.

login func
front end sends message string over tcp as "login", username, password to localhost:8081.  Server sends back code 601 if user does not exists, and 602 is password is incorrect.  Otherwise, server will send code 200.

manageFriends func
front end sends message string over tcp as "manage", friend, choice to localhost:8081.  Choice will be either add, or remove (what to do with friend).  If the friend does not exist, the server will send code 601, otherwise, the server will send code 200.

deleteAccount func
front end sends message string over tcp as "delete", username choice to localhost:8081.

makeAccount func
front end sends message string over tcp as "create", username, name, email, password to localhost:8081.  Servver sends back code 607 if the username already exists, and 606 if the user submitted an empty string for one of the form values.  If there are no errors, the backend just sends code 200

Resp error codes:
200		OK
512		Err: Post exceeds 100 characters
601		User Does Not Exist
602		Incorrect Password
606		Invalid Form Entry
607		Username Already Exists
608		Can't add friend that is already friend

WHERE MULTUPLE GO ROUTINES MAY TRY TO ACCESS DATA
There is a global map of RWMutexes, where file/directory name strings are the key.

R1: reason for read lock on user directories: Any goroutine that wants to read or write data within a user's directory must have a read lock on the directory. This ensures that when trying to delete a user's directory, there won't be any threads reading/writing files within the directory.

func deleteUserFile - while one thread is deleting the user's data, there are other go routines that may be trying to access data within the directory.  Because of this, to delete a user the function first locks the directory.  Unlocks the directory after deleting the user files.

func addFriendForUser - gets a read lock on the user's directory, because of R1.  RUnlock directory after checking if friend file exists

func removeFriendForUser - gets a read lock on user's directory, becayse of R1.  Also gets a write lock on the friend's file within the users directory so that no other threads can trying to access this file while it's being deleted.  Unlock file after deleting the file, and RUnlock the directory.

func UserExists - gets a read lock on user's directory, becayse of R1. RUnlock the directory after seeing if the user direcory exists.

func passwordCorrect - gets a read lock on user's directory, becayse of R1. RUnlock the directory after seeing if the user's password is correct.  Also get a read lock on the user's password text file, and unlock this after reading the file.  Otherwise, a user could try to login on two browsers at the same time, and there would be a data race

func addPostFile - gets a read lock on user's directory, becayse of R1. RUnlock the directory after adding the post file into the directory.  After creating the post file, get a write lock on the file, and unlock after writing the content to the file.  Otherwise, a different process may try to read from that file while it's being written.

func areFriends - gets a read lock on user's directory, becayse of R1. RUnlock the directory after checking if users are friends.

func createUserFeed - gets a read lock on user's directory, becayse of R1. RUnlock the directory at then end of the function.  Also iteravivley get read locks on the users/friend_name directory from where posts are being read from (because of R1), as well as the actual file being read (as other threads may try to access this file while it's being read).  RUnlock iteraively when done reading the files, and when done w/ the friends directory

func deleteUser - gets a read lock on the user directory that is friends with the person being deleted , becayse of R1. RUnlock the directory after deleting the person being deleted's file.
