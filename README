README

This project was built for a parallel and distributed systems course assignment at NYU.  It is a replicated and multithreaded web application written in Go.  This readme explains how to run the code, how the servers communicate with each other, how the data for the application is stored, how replication is implemented, data recovery from server crashes, as well as how data races are handled.

To run the backend server, you must first install gouuid:
go get github.com/nu7hatch/gouuid

To compile the code run this line:
go run client.go; go run balancer.go; go run ribbit_server1.go; go run ribbit_server2.go; go run ribbit_server3.go

To run the application:
./client
./balancer
./ribbit_server1
./ribbit_server2
./ribbit_server3


Create an account
http://www.localhost.com:8080/create

Login
http://www.localhost.com:8080/login

Logout
http://www.localhost.com:8080/logout

Add or remove friends
http://www.localhost.com:8080/manage

Delete your account
http://www.localhost.com:8080/delete

To post messages and see your feed
http://www.localhost.com:8080/main


Data storage: All user data is stored in files within a directory Users
A directory is maintained for each user, which contains user data .txt files for name, password, and email, as well as a friends directory, which contains a .txt file for each friend the user has, and posts directory for each post the user writes.

Messaging between frontend and backend:

post_croak func
front end sends message string over tcp as: "post", post, username (where post is the post content) to localhost:8081.  If the post is greater than 100 characters, the server will send code 512, and otherwise will send code 200.

login func
front end sends message string over tcp as "login", username, password to localhost:8081.  Server sends back code 601 if user does not exists, and 602 is password is incorrect.  Otherwise, server will send code 200.

manageFriends func
front end sends message string over tcp as "manage", friend, choice to localhost:8081.  Choice will be either add, or remove (what to do with friend).  If the friend does not exist, the server will send code 601, otherwise, the server will send code 200.

deleteAccount func
front end sends message string over tcp as "delete", username choice to localhost:8081.

makeAccount func
front end sends message string over tcp as "create", username, name, email, password to localhost:8081.  Servver sends back code 607 if the username already exists, and 606 if the user submitted an empty string for one of the form values.  If there are no errors, the backend just sends code 200

Resp error codes:
200		OK
512		Err: Post exceeds 100 characters
601		User Does Not Exist
602		Incorrect Password
606		Invalid Form Entry
607		Username Already Exists
608		Can't add friend that is already friend

WHERE MULTUPLE GO ROUTINES MAY TRY TO ACCESS DATA
There is a global map of RWMutexes, where file/directory name strings are the key.

R1: reason for read lock on user directories: Any goroutine that wants to read or write data within a user's directory must have a read lock on the directory. This ensures that when trying to delete a user's directory, there won't be any threads reading/writing files within the directory.

func deleteUserFile - while one thread is deleting the user's data, there are other go routines that may be trying to access data within the directory.  Because of this, to delete a user the function first locks the directory.  Unlocks the directory after deleting the user files.

func addFriendForUser - gets a read lock on the user's directory, because of R1.  RUnlock directory after checking if friend file exists

func removeFriendForUser - gets a read lock on user's directory, becayse of R1.  Also gets a write lock on the friend's file within the users directory so that no other threads can trying to access this file while it's being deleted.  Unlock file after deleting the file, and RUnlock the directory.

func UserExists - gets a read lock on user's directory, becayse of R1. RUnlock the directory after seeing if the user direcory exists.

func passwordCorrect - gets a read lock on user's directory, becayse of R1. RUnlock the directory after seeing if the user's password is correct.  Also get a read lock on the user's password text file, and unlock this after reading the file.  Otherwise, a user could try to login on two browsers at the same time, and there would be a data race

func addPostFile - gets a read lock on user's directory, becayse of R1. RUnlock the directory after adding the post file into the directory.  After creating the post file, get a write lock on the file, and unlock after writing the content to the file.  Otherwise, a different process may try to read from that file while it's being written.

func areFriends - gets a read lock on user's directory, becayse of R1. RUnlock the directory after checking if users are friends.

func createUserFeed - gets a read lock on user's directory, becayse of R1. RUnlock the directory at then end of the function.  Also iteravivley get read locks on the users/friend_name directory from where posts are being read from (because of R1), as well as the actual file being read (as other threads may try to access this file while it's being read).  RUnlock iteraively when done reading the files, and when done w/ the friends directory

func deleteUser - gets a read lock on the user directory that is friends with the person being deleted , becayse of R1. RUnlock the directory after deleting the person being deleted's file.


*REPLICATION*

ARCHITECTURE
This application has 3 backend servers which all maintain their own database file systems.  There is a single client, and there is also a load balancer which interfaces with the backend servers and client, acting as master.

READING FROM & WRITING TO DATABASES
To perform a function that requires a read, the client server asks the balancer for a backend server to send its read request to.

To perform a function that requires a write, the client server asks the balancer for ALL running backend servers to send it all up servers to send the write request to.

COMMUNICATION BETWEEN CLIENT & BALANCER
getReadServer() - client asks the balancer which server to send read request, balancer returns a port # or nil if all servers are down
getWriteServer() - cleint asks the balancer for all running servers to send write request, balancer returns a []string of port#s or "nil"s if servers down
tellBalancer() - client writes to balancer message "down," + port, meaning the server listening at this port is down.

COMMUNICATION BETWEEN BACKEND SERVERS & BALANCER
tellBalancerClientLeft() - tells the balancer a client left, sending the message "serverN", where N = the number of that server


LOAD BALANCING
The load balancer tracks the number of clients that are reading from each backend server, and how many clients leave each backend server.  It sends the clients to read from the backend servers with the least number of clients connected.  It does not track how many clients are writing with backend servers, as a client will always write with all running backend servers.

HANDLING SERVER CRASHES
The load balancer is constatnly checking the status of backend servers (if they are running or not) with the checkUpServers() and checkDownServers() functions.

If the client tries to connect a server that is down, it tells the balancer and then asks for a different server.

If a server goes down, the backend server realizes this either from asking the backend servers if they are up with the checkUpServers() function, or because a client tried to connect to one and was unable to.  If a server comes back up, the balancer will notice because of the checkDownServers() function.  

If all servers are down, then when the client tries to get a server from the balancer to talk to, it will be told there are none.  On the browser page a error message will appear saying that there are no running servers.

RECOVERY
I have implemented a solution for recovery, which is not perfect.  Here are the rules
1. After a server goes down (crashes or is manually stopped), it can come back online.
2. If a server that has gone down comes back up, the balancer will know this, but it will not let a client read or write to it. 
3. A server's status will only be set back to true (i.e. up and running) after all servers status' are false (i.e. down). (This is because before setting a servers status to true, it must update the database.  For consistency and thread safety, the database can not be updated while clients are connecting to other servers.)
4. A server's status could be false even though it is running.  This means it has crashed, and although it is running, its database has not been updated.
5. Once all the server's status are false, the databases will be updated.
6. On updating databases, the most recent database's data (which is measured by which server was the last to go down) will be copied into the other two server's databases.
7. Once the data has been restored, the balancer will check to make sure ALL servers are running (not their status, which will always be false at this point in time, but if they are actually running).
8. After restoring data, and once all backend servers running, the balancer will allow the client to connect to the servers again. 

SUMMARY
Two servers can crash, and clients will still be able to connect.  No server's can come back and have clients connect to them until their data is restored.  Data can not be restored until all servers's state is down, and at least one comes back up (state is false, but server is running).  Clients will be able to connect again once all servers are back up and running (status is true).

